using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.AI;

public class Monster : MonoBehaviour
{
    //public static Monster instance;

    public bool bIsTargeting = false;
    // public Slider progressBar;

    //Damage Effect
    Effect obj;

    [Header("??????????")]
    //?????? 1?????? HP
    public float MonLev01HP = 30;
    public float MonLev01Speed = 10;
    //???????? ???????????? ???????? ??????
    public int AttackHP = 10;
    //[Header("???????? ????")]
    ////?????????? ?????????? ???????? ??????
    //public int PlayerAttack1 = 10;
    //public int PlayerAttack2 = 15;
   
    public Animator Lv2Anim;
    public AudioSource playerTakeDamageSound;

    public enum State
    {
        Idle,
        Move,
        Attack,
        Die,
        Nuckback,
    }
    public State state;
    public GameObject PlayerTarget;
    public float speed = 1.5f;
    public float findDistance = 5f;
    public float attackDistance = 1.5f;
    float attackTime = 1f;
    float curTime;

    //?????? HP?? UI
    //Slider MonsterHpBar;
    //private void Awake()
    //{
    //    instance = this;
    //}

    void Start()
    {
        PlayerTarget = GameObject.Find("Player");
        //MonsterHpBar = gameObject.GetComponentInChildren<Slider>();
        //MonsterHpBar.maxValue = MonLev01HP;
        //MonsterHpBar.value = MonLev01HP;
        //progressBar.maxValue = 15;
        Lv2Anim.GetComponentInChildren<Animator>();
    }

    /// ///////////////////////////////////////////////////////

    // Update is called once per frame
    void Update()
    {

        switch (state)
        {
            case State.Idle:
                MonsterIdle();
                break;
            case State.Move:
                MonsterMove();
                break;
            case State.Attack:
                MonsterAttack();
                break;
            case State.Die:
                MonsterDie();
                break;
            case State.Nuckback:
                MonsterNuckback();
                break;
        }
    }


    State prevState;
    public void SetNuckback(Vector3 velocity)
    {
        // ?????????? ????????
        prevState = state;
        // ?????????? ????????
        state = State.Nuckback;

        //???? ?? ?? ?? ??, ?????? HP?? 15?? ????
        MonHpBar();
        MonLev01HP -= Player.instance.PlayerAttack2;

        Debug.Log("MonHp : " + MonLev01HP);

        // ?????????? ???????????????????????? 0???? ??????
        currentTime = 0;
        // velocity?? ?????? ???? ??????.
        Rigidbody monsterRb = gameObject.GetComponent<Rigidbody>();
        monsterRb.AddForce(velocity, ForceMode.Impulse);



        //1. ???????? ???????????? ?????? ???? ?????? !

    }

    float currentTime;
    float nuckbackTime = 0.5f;
    private void MonsterNuckback()
    {
        // ???????????? ???? ???????? ????????.
        // ?????? ????????
        currentTime += Time.deltaTime;


        // ?????????? ????????
        if (currentTime > nuckbackTime)
        {
            // ?????????? ????????.
            state = prevState;
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject != null)
        {
            //???? ?????? ???????? ???????? ???? ??????.
            if (collision.gameObject.CompareTag("Bullet"))
            {
                playerTakeDamageSound.Play();
                MonHpBar();
                StartCoroutine("ShootFX");
                Lv2Anim.SetTrigger("TakeDamage");
                MonLev01HP -= Player.instance.PlayerAttack1;
                if (MonLev01HP <= 0)
                {
                    state = State.Die;
                    //MonsterManager.instance.ICanDie(this);
                }
                Destroy(collision.gameObject);
                //Debug.Log(MonLev01HP);
            }
        }
    }

    //???????? ?????????? ?????? ???? ???????????? ?????? ??????
    //???????????? ????
    public void MonsterIdle()
    {
        Lv2Anim.SetTrigger("Idle");

        //target?? ???????????? ???????? Move?? ????????.
        //1. ???? target?? ?????? ??????
        //Distance(???? ????, ???? ?????? ????)
        float distance = Vector3.Distance(transform.position, PlayerTarget.transform.position);
        //2. ???? ?? ?????? ???????????? ??????
        if (distance < findDistance)
        {
            //3. Move?????? ????????
            state = State.Move;
        }


    }

    public void MonsterMove()
    {
        if (MonLev01HP >= 0)
        {
            //target???????? ?????????? target?? ???????????? ???????? Attack???? ????????.
            //1. target???????? ????????. P = P0 + vt
            Vector3 dir = PlayerTarget.transform.position - transform.position;
            dir.Normalize();
            transform.position += dir * speed * Time.deltaTime;
            transform.forward = dir;
            //2. ???? target?? ?????? ??????.
            //Distance(???? ????, ???? ?????? ????)
            float distance = Vector3.Distance(transform.position, PlayerTarget.transform.position);
            //3. ???? ?? ?????? ???????????? ??????
            if (distance < attackDistance)
            {
                //4. Attack?????? ????????.
                state = State.Attack;
            }
            else
            {
                //???? ?????? ???????????? ??????
                ////?????? ???? ???????? ?????? ???? ???? ????
                if (distance < findDistance)
                {
                    state = State.Move;
                }
                //???? ???? ???????????? ??????.
                else
                {
                    state = State.Idle;
                }
            }
        }
        else
        {
            state = State.Die;
        }

    }
    // ???????? ???????????? 1?????? ?????? ???? ?????? ????????

    public void MonsterAttack()
    {
        //???????? ???? ???? ???? ?????????? target?? ???????? ???? ?????? Move?????? ????????. ,?????? ?????? ???? ???????? ????!
        if (MonLev01HP >= 0 && state != State.Nuckback)
        {
                Lv2Anim.SetTrigger("Attack");
            //1. ?????? ????????
            curTime += Time.deltaTime;
            //2. ?????????? ?????????? ????
            if (curTime > attackTime)
            {
                //3. ?????????? ??????????
                curTime = 0f;
                //4. ?????????? ????????
                //target.AddDamage(); - ???? ???? ????

                //5. ???? target?? ???????? ???? ?????? Move?????? ????????.(?????????? ?????????? ?????????? ???????? ????)
                //5-1. ???? target?? ?????? ??????.
                float distance = Vector3.Distance(transform.position, PlayerTarget.transform.position);
                //5-2. ???? ?? ?????? ???????????? ?????? ??????
                if (distance >= attackDistance)
                {
                    //5-3. Move?????? ????????.
                    state = State.Move;
                }
            }
        }
        else
        {
            state = State.Die;
        }
    }


    public GameObject Honeycombfactory;
    public GameObject ShootEffect;
    public void ShootFX()
    {
        GameObject Shoot = Instantiate(ShootEffect);
        ShootEffect.transform.position = transform.position;
        Destroy(Shoot, 2);
    }

    public GameObject DieFxFactory;
    public void MonsterDie()
    {
        Lv2Anim.SetTrigger("Die");

        //progressBar.value++;
        GameObject DieFX = Instantiate(DieFxFactory);
        DieFX.transform.position = transform.position;
        Destroy(DieFX, 3);

        Destroy(this.gameObject);
        GameObject Honeycomb = Instantiate(Honeycombfactory);
        Honeycomb.transform.position = transform.position;
        MonsterManager.instance.ICanDie(this);

    }

    void DieEffect()
    {

    }

    public GameObject floatingTextPrefab;
    public void MonHpBar()
    {
        //if (MonLev01HP >= 0)
        //{

        //    MonsterHpBar.value -= Player.instance.PlayerAttack1;

        //}

        if (floatingTextPrefab && MonLev01HP >= 0)
        {
            ShowFloatingText();
        }

    }

    void ShowFloatingText()
    {
        var go = Instantiate(floatingTextPrefab, transform.position, Quaternion.identity, transform);
        go.GetComponent<TextMesh>().text = MonLev01HP.ToString();
    }
}
